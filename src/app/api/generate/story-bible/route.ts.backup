import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai'
import { NextResponse } from 'next/server'
import { generateContent, generateStructuredContent } from '@/services/azure-openai'

// Initialize Gemini AI with API key
const getGeminiKey = () => {
  const apiKey = process.env.GEMINI_API_KEY
  if (!apiKey) {
    throw new Error('GEMINI_API_KEY is not configured')
  }
  
  if (apiKey.length < 10) {
    throw new Error('GEMINI_API_KEY is too short, please check the value')
  }
  
  return apiKey
}

const genAI = new GoogleGenerativeAI(getGeminiKey())

// Helper function to safely parse JSON from text that might contain markdown code blocks
const safeParseJSON = (text: string) => {
  try {
    // First, try direct parsing
    return JSON.parse(text)
  } catch (e) {
    // If that fails, look for JSON inside markdown code blocks
    try {
      const jsonMatch = text.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/)
      if (jsonMatch && jsonMatch[1]) {
        return JSON.parse(jsonMatch[1])
      }
    } catch (innerError) {
      console.error("Failed to parse JSON from markdown block", innerError)
    }
    
    // If all parsing attempts fail, create a basic structure
    return {
      seriesTitle: "Untitled Series",
      mainCharacters: [
        {
          name: "Protagonist",
          archetype: "Hero",
          arc: "A journey of self-discovery"
        }
      ],
      narrativeArcs: [
        {
          title: "Beginning",
          summary: "The adventure begins..."
        }
      ],
      potentialBranchingPaths: "Various paths the story could take..."
    }
  }
}

// Story Bible schema for structured generation
const storyBibleSchema = {
  type: "object",
  properties: {
    seriesTitle: { type: "string" },
    mainCharacters: {
      type: "array",
      items: {
        type: "object",
        properties: {
          name: { type: "string" },
          archetype: { type: "string" },
          arc: { type: "string" },
          description: { type: "string" }
        }
      }
    },
    narrativeArcs: {
      type: "array",
      items: {
        type: "object",
        properties: {
          title: { type: "string" },
          summary: { type: "string" },
          episodes: {
            type: "array",
            items: {
              type: "object",
              properties: {
                number: { type: "number" },
                title: { type: "string" },
                summary: { type: "string" }
              }
            }
          }
        }
      }
    },
    potentialBranchingPaths: { type: "string" },
    worldBuilding: {
      type: "object",
      properties: {
        setting: { type: "string" },
        rules: { type: "string" },
        locations: {
          type: "array",
          items: {
            type: "object",
            properties: {
              name: { type: "string" },
              description: { type: "string" }
            }
          }
        }
      }
    }
  }
}

// Generate with Azure OpenAI
async function generateStoryBibleWithAzure(synopsis: string, theme: string) {
  // Construct a detailed system prompt for the story bible
  const systemPrompt = `You are a Head Writer at a prestigious television studio, responsible for creating comprehensive story bibles for new series.
You excel at crafting deep, engaging narratives with complex character arcs, compelling world-building, and meaningful themes.
You must create a complete narrative framework for a 60-episode short-form series.
Follow these quality guidelines:

Tone: Create a consistent tone appropriate to the genre and theme.
Realism: Ensure characters behave in psychologically realistic ways with clear motivations.
Subtext: Layer meaning beneath the surface narrative.
Structure: Create well-defined narrative arcs across the series.
Coherence: Ensure all story elements connect logically.
Character Development: Design characters with depth who evolve meaningfully.
Thematic Depth: Integrate the central theme throughout the narrative.

Return a single JSON object representing the complete Story Bible.`;

  // Construct the user prompt with the synopsis and theme
  const prompt = `Create a comprehensive Story Bible for a 60-episode series with the following:

Synopsis: ${synopsis}
Theme: ${theme}

The Story Bible should include:
1. A catchy and appropriate series title
2. At least 6 main characters, each with a name, archetype, and a description of their full-series character arc
3. 6 major narrative arcs (10 episodes each), with a title and summary of key plot points and character developments for each
4. Potential branching paths that could create variation in the storyline
5. World-building elements including setting, rules of the world, and key locations

Ensure that:
- Characters have clear motivations, flaws, and growth arcs
- Narrative arcs build logically with escalating stakes
- The central theme is woven throughout the series
- Each narrative arc has a clear beginning, middle, and end
- The world feels rich, consistent, and immersive`;

  try {
    // Generate structured content using Azure OpenAI with GPT-4.1
    const result = await generateStructuredContent(prompt, systemPrompt, storyBibleSchema, {
      model: 'gpt-4.1',
      temperature: 0.8,
      maxTokens: 4000
    })
    
    console.log('Successfully generated story bible with Azure OpenAI GPT-4.1')
    return result
  } catch (error) {
    console.error('Error generating story bible with Azure OpenAI GPT-4.1:', error)
    
    // Try GPT-4o as fallback
    try {
      console.log('Falling back to GPT-4o...')
      const result = await generateStructuredContent(prompt, systemPrompt, storyBibleSchema, {
        model: 'gpt-4o',
        temperature: 0.8,
        maxTokens: 4000
      })
      
      console.log('Successfully generated story bible with GPT-4o fallback')
      return result
    } catch (secondError) {
      console.error('Error with GPT-4o fallback:', secondError)
      
      // Fall back to Gemini if Azure OpenAI completely fails
      console.log('Falling back to Gemini...')
      return generateStoryBibleWithGemini(synopsis, theme)
    }
  }
}

// Generate with Google Gemini
async function generateStoryBibleWithGemini(synopsis: string, theme: string) {
  // Use the stable mode model from environment variables or default to gemini-1.5-pro
  const geminiModel = process.env.GEMINI_STABLE_MODE_MODEL || 'gemini-2.5-pro'
  const model = genAI.getGenerativeModel({ model: geminiModel })
  
  console.log(`Generating story bible with Gemini model: ${geminiModel}`)
  
  const prompt = `Create a comprehensive Story Bible for a 60-episode series with the following:

Synopsis: ${synopsis}
Theme: ${theme}

Please follow this EXACT JSON format without any markdown or additional text:
{
  "seriesTitle": "A catchy title for the series",
  "mainCharacters": [
    {
      "name": "Character Name",
      "archetype": "Character Archetype",
      "arc": "Brief description of character's full-series arc",
      "description": "Detailed character description"
    }
    // At least 6 main characters
  ],
  "narrativeArcs": [
    {
      "title": "Arc Title",
      "summary": "Summary of this narrative arc",
      "episodes": [
        {
          "number": 1,
          "title": "Episode Title",
          "summary": "Brief episode summary"
        }
        // Include 10 episodes per arc
      ]
    }
    // Include 6 narrative arcs
  ],
  "potentialBranchingPaths": "Description of major choices and consequences available to viewers throughout the series",
  "worldBuilding": {
    "setting": "Overall setting description",
    "rules": "Key rules or laws of this world",
    "locations": [
      {
        "name": "Location Name",
        "description": "Location description"
      }
      // Include at least 5 key locations
    ]
  }
}

Ensure that:
- Characters have clear motivations, flaws, and growth arcs
- Narrative arcs build logically with escalating stakes
- The central theme is woven throughout the series
- Each narrative arc has a clear beginning, middle, and end
- The world feels rich, consistent, and immersive`;

  try {
    const genResult = await model.generateContent(prompt);

    const responseText = genResult.response.text()
    const parsedResponse = safeParseJSON(responseText)
    return parsedResponse
  } catch (error) {
    console.error('Error generating story bible with Gemini:', error)
    
    // Create a fallback response if everything fails
    return {
      seriesTitle: `The ${theme.split(' ')[0]} Chronicles`,
      mainCharacters: [
        {
          name: "Main Protagonist",
          archetype: "Hero",
          arc: "Overcomes personal demons to achieve growth",
          description: "The central character of our story"
        },
        {
          name: "Supporting Character",
          archetype: "Mentor",
          arc: "Guides the protagonist while dealing with past failures",
          description: "Wise but flawed guide"
        }
      ],
      narrativeArcs: [
        {
          title: "Beginning",
          summary: `The start of the journey exploring ${synopsis.substring(0, 50)}...`,
          episodes: [
            { 
              number: 1, 
              title: "Pilot", 
              summary: "Introduction to the world and characters" 
            }
          ]
        }
      ],
      potentialBranchingPaths: "Various paths the story could take based on character decisions.",
      worldBuilding: {
        setting: "A world where the story unfolds",
        rules: "The basic principles that govern this world",
        locations: [
          {
            name: "Main Setting",
            description: "The primary location where most action occurs"
          }
        ]
      }
    }
  }
}

export async function POST(request: Request) {
  try {
    const { synopsis, theme, mode = 'beast' } = await request.json()
    
    if (!synopsis || !theme) {
      return NextResponse.json(
        { error: 'Synopsis and theme are required' },
        { status: 400 }
      )
    }
    
    console.log(`Generating story bible with mode: ${mode}`)
    
    // Generate content based on mode
    let storyBible
    if (mode === 'beast') {
      storyBible = await generateStoryBibleWithAzure(synopsis, theme)
    } else {
      storyBible = await generateStoryBibleWithGemini(synopsis, theme)
    }
    
    return NextResponse.json({ storyBible })
  } catch (error: any) {
    console.error('Story Bible API error:', error.message)
    return NextResponse.json(
      { error: error.message || 'Error generating story bible' },
      { status: 500 }
    )
  }
} 