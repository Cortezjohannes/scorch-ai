'use client'

import React, { useState, useEffect } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { motion, AnimatePresence } from 'framer-motion'
import Image from 'next/image'

export default function StoryBiblePage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [storyBible, setStoryBible] = useState<any>(null)
  const [activeTab, setActiveTab] = useState<'overview' | 'characters' | 'arcs' | 'world' | 'choices'>('overview')
  const [loading, setLoading] = useState(true)
  const [currentCharacterIndex, setCurrentCharacterIndex] = useState(0)
  const [currentArcIndex, setCurrentArcIndex] = useState(0)
  
  useEffect(() => {
    const loadStoryBible = () => {
      try {
        const savedBible = localStorage.getItem('reeled-story-bible')
        const savedEpisodes = localStorage.getItem('reeled-episodes')
        
        if (savedBible) {
          const parsed = JSON.parse(savedBible)
          let dynamicStoryBible = { ...parsed.storyBible }
          
          // Apply user choices to update the story bible dynamically
          if (savedEpisodes) {
            const episodes = JSON.parse(savedEpisodes)
            dynamicStoryBible = applyUserChoicesToStoryBible(dynamicStoryBible, episodes)
          }
          
          setStoryBible(dynamicStoryBible)
        } else {
          router.push('/')
        }
      } catch (error) {
        console.error('Error loading story bible:', error)
        router.push('/')
      } finally {
        setLoading(false)
      }
    }

    loadStoryBible()
  }, [router])

  // Function to apply user choices to dynamically update the story bible
  const applyUserChoicesToStoryBible = (originalBible: any, episodes: any[]) => {
    if (!episodes || episodes.length === 0) return originalBible
    
    const updatedBible = { ...originalBible }
    
    // Track fan choices and their impacts
    // Track major story shifts and arc transitions
    const arcTransitions: any[] = []
    const majorChoiceImpacts: any[] = []
    
    episodes.forEach((episode, index) => {
      // Detect arc finale episodes (every 8-12 episodes approximately)
      const isArcFinale = episode.episodeNumber % 10 === 0 || 
                         (episode.episodeNumber > 8 && episode.branchingOptions && 
                          episode.branchingOptions.some((option: string) => 
                            option.toLowerCase().includes('new') || 
                            option.toLowerCase().includes('different') ||
                            option.toLowerCase().includes('explore') ||
                            option.toLowerCase().includes('leave')
                          ))
      
      if (isArcFinale && episode.chosenPath) {
        arcTransitions.push({
          episode: episode.episodeNumber,
          choice: episode.chosenPath,
          impact: "This choice opened up new narrative possibilities for the next arc",
          nextArcPotential: episode.newCharacters?.length || episode.newLocations?.length ? 
            "Introduced new story elements" : "Shifted story direction"
        })
      }
      
      // Track choices that had major impacts
      if (episode.newCharacters?.length > 0 || episode.newLocations?.length > 0) {
        majorChoiceImpacts.push({
          episode: episode.episodeNumber,
          choice: episode.chosenPath,
          newElements: [
            ...(episode.newCharacters || []).map((char: string) => ({ type: 'character', name: char })),
            ...(episode.newLocations || []).map((loc: string) => ({ type: 'location', name: loc }))
          ]
        })
      }
    const fanChoices: any[] = []
    const newCharacters: any[] = []
    const newLocations: any[] = []
    const storyEvolution: any[] = []
    
    episodes.forEach((episode, index) => {
      // Track user choices
      if (episode.chosenPath) {
        fanChoices.push({
          episode: episode.episodeNumber,
          choice: episode.chosenPath,
          impact: `This choice shaped the direction of Episode ${episode.episodeNumber + 1}`
        })
      }
      
      // Track new characters introduced
      if (episode.newCharacters && episode.newCharacters.length > 0) {
        episode.newCharacters.forEach((char: string) => {
          if (!newCharacters.find(c => c.name === char)) {
            newCharacters.push({
              name: char,
              introducedInEpisode: episode.episodeNumber,
              description: "Character introduced through fan choices and story evolution"
            })
          }
        })
      }
      
      // Track new locations introduced
      if (episode.newLocations && episode.newLocations.length > 0) {
        episode.newLocations.forEach((loc: string) => {
          if (!newLocations.find(l => l.name === loc)) {
            newLocations.push({
              name: loc,
              introducedInEpisode: episode.episodeNumber,
              description: "Location introduced through story progression"
            })
          }
        })
      }
      
      // Track story evolution through callbacks and foreshadowing
      if (episode.callbacks && episode.callbacks.length > 0) {
        storyEvolution.push({
          episode: episode.episodeNumber,
          type: 'callback',
          elements: episode.callbacks
        })
      }
      
      if (episode.foreshadowing && episode.foreshadowing.length > 0) {
        storyEvolution.push({
          episode: episode.episodeNumber,
          type: 'foreshadowing',
          elements: episode.foreshadowing
        })
      }
    })
    
    // Add dynamic elements to the story bible
    updatedBible.fanChoices = fanChoices
    updatedBible.newCharacters = newCharacters
    updatedBible.newLocations = newLocations
    updatedBible.storyEvolution = storyEvolution
    updatedBible.episodesGenerated = episodes.length
    updatedBible.arcTransitions = arcTransitions
    updatedBible.majorChoiceImpacts = majorChoiceImpacts
    
    // Update main characters list with new characters
    if (newCharacters.length > 0) {
      updatedBible.mainCharacters = [
        ...(updatedBible.mainCharacters || []),
        ...newCharacters.map(char => ({
          name: char.name,
          archetype: "Introduced Character",
          arc: char.description,
          description: `Introduced in Episode ${char.introducedInEpisode} through story evolution`
        }))
      ]
    }
    
    // Update world building with new locations
    if (newLocations.length > 0) {
      if (!updatedBible.worldBuilding) {
        updatedBible.worldBuilding = { locations: [] }
      }
      if (!updatedBible.worldBuilding.locations) {
        updatedBible.worldBuilding.locations = []
      }
      
      updatedBible.worldBuilding.locations = [
        ...updatedBible.worldBuilding.locations,
        ...newLocations
      ]
    }
    
    return updatedBible
  }

  const handleBeginEpisode = () => {
    const synopsis = searchParams.get('synopsis') || ''
    const theme = searchParams.get('theme') || ''
    router.push(`/episode/1?synopsis=${encodeURIComponent(synopsis)}&theme=${encodeURIComponent(theme)}`)
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <motion.div
          className="flex flex-col items-center"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          <motion.div 
            className="w-20 h-20 border-4 border-t-[#e2c376] border-r-[#e2c37650] border-b-[#e2c37630] border-l-[#e2c37620] rounded-full"
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
          />
          <p className="text-[#e7e7e7]/70 mt-4">Loading your Story Bible...</p>
        </motion.div>
      </div>
    )
  }

  if (!storyBible) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center p-4">
        <h2 className="text-xl text-[#e7e7e7]">Story Bible not found</h2>
        <p className="text-[#e7e7e7]/70 mt-2">Your story bible could not be loaded.</p>
        <button 
          className="mt-6 px-4 py-2 bg-[#e2c376] text-black font-medium rounded-lg hover:bg-[#d4b46a] transition-colors"
          onClick={() => router.push('/')}
        >
          Return to Start
        </button>
      </div>
    )
  }

  return (
    <motion.div 
      className="min-h-screen p-4 sm:p-6 md:p-8"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <motion.div
          className="mb-8"
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.7 }}
        >
          <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold text-center bg-gradient-to-r from-[#e2c376] to-[#c4a75f] text-transparent bg-clip-text mb-4">
            {storyBible.seriesTitle || "Your Story Bible"}
          </h1>
          <p className="text-[#e7e7e7]/80 text-center max-w-3xl mx-auto">
            A comprehensive narrative framework for your dynamic series
          </p>
        </motion.div>

        {/* Navigation Tabs */}
        <div className="flex justify-center mb-8">
          <div className="bg-[#1e1e1e]/80 border border-[#36393f] rounded-lg p-1 flex flex-wrap">
            {(['overview', 'characters', 'arcs', 'world', 'choices'] as const).map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`px-4 py-2 rounded-md transition-all ${
                  activeTab === tab 
                    ? 'bg-[#e2c376] text-black font-medium' 
                    : 'text-[#e7e7e7]/80 hover:text-[#e7e7e7] hover:bg-[#2a2a2a]'
                }`}
              >
                {tab === 'choices' ? 'Your Choices' : tab.charAt(0).toUpperCase() + tab.slice(1)}
              </button>
            ))}
          </div>
        </div>

        {/* Content */}
        <AnimatePresence mode="wait">
          <motion.div
            key={activeTab}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            transition={{ duration: 0.3 }}
            className="bg-[#1a1a1a] border border-[#36393f] rounded-xl p-6 shadow-lg mb-8"
          >
            {/* Overview Tab */}
            {activeTab === 'overview' && (
              <div className="space-y-6">
                <h2 className="text-2xl font-bold text-[#e2c376]">Series Overview</h2>
                <p className="text-[#e7e7e7]/90 leading-relaxed">
                  {storyBible.seriesOverview || "A compelling series spanning 60 episodes across 6 major narrative arcs."}
                </p>
                
                {storyBible.potentialBranchingPaths && (
                  <div className="mt-8">
                    <h3 className="text-xl font-semibold text-[#e2c376] mb-3">Potential Branching Paths</h3>
                    <p className="text-[#e7e7e7]/90">{storyBible.potentialBranchingPaths}</p>
                  </div>
                )}
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-8">
                  <div className="bg-[#2a2a2a] p-4 rounded-lg border border-[#36393f] flex flex-col items-center">
                    <div className="text-4xl font-bold text-[#e2c376] mb-2">
                      {storyBible.mainCharacters?.length || 0}
                    </div>
                    <div className="text-[#e7e7e7]/70 text-center">Main Characters</div>
                  </div>
                  <div className="bg-[#2a2a2a] p-4 rounded-lg border border-[#36393f] flex flex-col items-center">
                    <div className="text-4xl font-bold text-[#e2c376] mb-2">
                      {storyBible.narrativeArcs?.length || 0}
                    </div>
                    <div className="text-[#e7e7e7]/70 text-center">Narrative Arcs</div>
                  </div>
                  <div className="bg-[#2a2a2a] p-4 rounded-lg border border-[#36393f] flex flex-col items-center">
                    <div className="text-4xl font-bold text-[#e2c376] mb-2">
                      {storyBible.narrativeArcs?.reduce((total: number, arc: any) => total + (arc.episodes?.length || 10), 0) || '40-80'}
                    </div>
                    <div className="text-[#e7e7e7]/70 text-center">Total Episodes</div>
                  </div>
                </div>
              </div>
            )}

            {/* Characters Tab */}
            {activeTab === 'characters' && (
              <div>
                <h2 className="text-2xl font-bold text-[#e2c376] mb-6">Main Characters</h2>
                
                {storyBible.mainCharacters && storyBible.mainCharacters.length > 0 ? (
                  <div className="space-y-8">
                    {/* Character Nav */}
                    <div className="flex flex-wrap gap-2">
                      {storyBible.mainCharacters.map((character: any, index: number) => (
                        <button
                          key={index}
                          onClick={() => setCurrentCharacterIndex(index)}
                          className={`px-3 py-1.5 rounded-full transition-all ${
                            currentCharacterIndex === index
                              ? 'bg-[#e2c376] text-black font-medium'
                              : 'bg-[#2a2a2a] text-[#e7e7e7]/80 hover:bg-[#36393f]'
                          }`}
                        >
                          {character.name}
                        </button>
                      ))}
                    </div>
                    
                    {/* Current Character */}
                    {storyBible.mainCharacters[currentCharacterIndex] && (
                      <motion.div
                        key={currentCharacterIndex}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3 }}
                        className="bg-[#2a2a2a] border border-[#36393f] rounded-lg p-6"
                      >
                        <div className="flex flex-col md:flex-row gap-6">
                          <div className="w-full md:w-1/3 bg-[#1e1e1e] rounded-lg p-4 flex items-center justify-center">
                            <div className="aspect-square w-full max-w-[250px] relative bg-[#36393f]/50 rounded-lg overflow-hidden">
                              <div className="absolute inset-0 flex items-center justify-center text-[#e7e7e7]/30">
                                Character Portrait
                              </div>
                            </div>
                          </div>
                          <div className="w-full md:w-2/3">
                            <div className="flex justify-between items-start mb-4">
                              <h3 className="text-2xl font-bold text-[#e2c376]">
                                {storyBible.mainCharacters[currentCharacterIndex].name}
                              </h3>
                              <span className="bg-[#1e1e1e] px-3 py-1 rounded-full text-sm text-[#e7e7e7]/70">
                                {storyBible.mainCharacters[currentCharacterIndex].archetype || "Character"}
                              </span>
                            </div>
                            
                            {storyBible.mainCharacters[currentCharacterIndex].description && (
                              <div className="mb-4">
                                <h4 className="text-sm text-[#e7e7e7]/50 mb-2">Description</h4>
                                <p className="text-[#e7e7e7]/90">
                                  {storyBible.mainCharacters[currentCharacterIndex].description}
                                </p>
                              </div>
                            )}
                            
                            <div>
                              <h4 className="text-sm text-[#e7e7e7]/50 mb-2">Character Arc</h4>
                              <p className="text-[#e7e7e7]/90">
                                {storyBible.mainCharacters[currentCharacterIndex].arc || "Character's journey throughout the series."}
                              </p>
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    )}
                  </div>
                ) : (
                  <div className="text-center py-8 text-[#e7e7e7]/50">
                    No character information available
                  </div>
                )}
              </div>
            )}

            {/* Arcs Tab */}
            {activeTab === 'arcs' && (
              <div>
                <h2 className="text-2xl font-bold text-[#e2c376] mb-6">Narrative Arcs</h2>
                
                {storyBible.narrativeArcs && storyBible.narrativeArcs.length > 0 ? (
                  <div className="space-y-8">
                    {/* Arc Navigation */}
                    <div className="flex flex-wrap gap-2">
                      {storyBible.narrativeArcs.map((arc: any, index: number) => (
                        <button
                          key={index}
                          onClick={() => setCurrentArcIndex(index)}
                          className={`px-3 py-1.5 rounded-full transition-all ${
                            currentArcIndex === index
                              ? 'bg-[#e2c376] text-black font-medium'
                              : 'bg-[#2a2a2a] text-[#e7e7e7]/80 hover:bg-[#36393f]'
                          }`}
                        >
                          Arc {index + 1}: {arc.title}
                        </button>
                      ))}
                    </div>
                    
                    {/* Current Arc */}
                    {storyBible.narrativeArcs[currentArcIndex] && (
                      <motion.div
                        key={currentArcIndex}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3 }}
                        className="space-y-6"
                      >
                        <div className="bg-[#2a2a2a] border border-[#36393f] rounded-lg p-6">
                          <h3 className="text-2xl font-bold text-[#e2c376] mb-4">
                            {storyBible.narrativeArcs[currentArcIndex].title}
                          </h3>
                          <p className="text-[#e7e7e7]/90 mb-6">
                            {storyBible.narrativeArcs[currentArcIndex].summary}
                          </p>
                          
                          {/* Episodes in this arc */}
                          {storyBible.narrativeArcs[currentArcIndex].episodes && 
                           storyBible.narrativeArcs[currentArcIndex].episodes.length > 0 && (
                            <div>
                              <h4 className="text-lg font-semibold text-[#e2c376] mb-4">Episodes</h4>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {storyBible.narrativeArcs[currentArcIndex].episodes.map((episode: any, episodeIndex: number) => (
                                  <div 
                                    key={episodeIndex}
                                    className="bg-[#1e1e1e] border border-[#36393f] rounded-lg p-4 hover:border-[#e2c37640] transition-colors"
                                  >
                                    <div className="flex justify-between items-center mb-2">
                                      <h5 className="font-medium text-[#e2c376]">Episode {episode.number}</h5>
                                      <span className="text-xs text-[#e7e7e7]/50">{`${currentArcIndex * 10 + episodeIndex + 1}/60`}</span>
                                    </div>
                                    <h6 className="font-medium mb-2">{episode.title}</h6>
                                    <p className="text-sm text-[#e7e7e7]/70">{episode.summary}</p>
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      </motion.div>
                    )}
                  </div>
                ) : (
                  <div className="text-center py-8 text-[#e7e7e7]/50">
                    No narrative arc information available
                  </div>
                )}
              </div>
            )}

            {/* World Building Tab */}
            {activeTab === 'world' && (
              <div>
                <h2 className="text-2xl font-bold text-[#e2c376] mb-6">World Building</h2>
                
                {storyBible.worldBuilding ? (
                  <div className="space-y-8">
                    {storyBible.worldBuilding.setting && (
                      <div>
                        <h3 className="text-xl font-semibold text-[#e2c376] mb-3">Setting</h3>
                        <p className="text-[#e7e7e7]/90 bg-[#2a2a2a] p-4 rounded-lg border border-[#36393f]">
                          {storyBible.worldBuilding.setting}
                        </p>
                      </div>
                    )}
                    
                    {storyBible.worldBuilding.rules && (
                      <div>
                        <h3 className="text-xl font-semibold text-[#e2c376] mb-3">Rules of the World</h3>
                        <p className="text-[#e7e7e7]/90 bg-[#2a2a2a] p-4 rounded-lg border border-[#36393f]">
                          {storyBible.worldBuilding.rules}
                        </p>
                      </div>
                    )}
                    
                    {storyBible.worldBuilding.locations && storyBible.worldBuilding.locations.length > 0 && (
                      <div>
                        <h3 className="text-xl font-semibold text-[#e2c376] mb-3">Key Locations</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          {storyBible.worldBuilding.locations.map((location: any, index: number) => (
                            <div 
                              key={index}
                              className="bg-[#2a2a2a] border border-[#36393f] rounded-lg p-4"
                            >
                              <h4 className="font-medium text-[#e2c376] mb-2">{location.name}</h4>
                              <p className="text-sm text-[#e7e7e7]/80">{location.description}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="text-center py-8 text-[#e7e7e7]/50">
                    No world building information available
                  </div>
                )}
              </div>
            )}

            {/* Choices Tab */}
            {activeTab === 'choices' && (
              <div>
                <h2 className="text-2xl font-bold text-[#e2c376] mb-6">Your Story Journey</h2>
                
                {storyBible.episodesGenerated && storyBible.episodesGenerated > 0 ? (
                  <div className="space-y-8">
                    {/* Progress Overview */}
                    <div className="bg-[#2a2a2a] border border-[#36393f] rounded-lg p-6">
                      <h3 className="text-xl font-semibold text-[#e2c376] mb-4">Story Progress</h3>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="text-center p-4 bg-[#1e1e1e] rounded-lg">
                          <div className="text-2xl font-bold text-[#e2c376] mb-1">
                            {storyBible.episodesGenerated}
                          </div>
                          <div className="text-sm text-[#e7e7e7]/70">Episodes Generated</div>
                        </div>
                        <div className="text-center p-4 bg-[#1e1e1e] rounded-lg">
                          <div className="text-2xl font-bold text-[#e2c376] mb-1">
                            {storyBible.fanChoices?.length || 0}
                          </div>
                          <div className="text-sm text-[#e7e7e7]/70">Choices Made</div>
                        </div>
                        <div className="text-center p-4 bg-[#1e1e1e] rounded-lg">
                          <div className="text-2xl font-bold text-[#e2c376] mb-1">
                            {(storyBible.newCharacters?.length || 0) + (storyBible.newLocations?.length || 0)}
                          </div>
                          <div className="text-sm text-[#e7e7e7]/70">New Elements Added</div>
                        </div>
                      </div>
                    </div>

                    {/* Fan Choices */}
                    {storyBible.fanChoices && storyBible.fanChoices.length > 0 && (
                      <div>
                        <h3 className="text-xl font-semibold text-[#e2c376] mb-4">Your Decisions</h3>
                        <div className="space-y-4">
                          {storyBible.fanChoices.map((choice: any, index: number) => (
                            <div key={index} className="bg-[#2a2a2a] border border-[#36393f] rounded-lg p-4">
                              <div className="flex justify-between items-start mb-2">
                                <span className="text-sm font-medium text-[#e2c376]">Episode {choice.episode}</span>
                                <span className="text-xs text-[#e7e7e7]/50">Your Choice</span>
                              </div>
                              <p className="text-[#e7e7e7]/90 mb-2">{choice.choice}</p>
                              <p className="text-sm text-[#e7e7e7]/70 italic">{choice.impact}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* New Characters */}
                    {storyBible.newCharacters && storyBible.newCharacters.length > 0 && (
                      <div>
                        <h3 className="text-xl font-semibold text-[#e2c376] mb-4">Characters Introduced Through Your Journey</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          {storyBible.newCharacters.map((character: any, index: number) => (
                            <div key={index} className="bg-[#2a2a2a] border border-[#36393f] rounded-lg p-4">
                              <div className="flex justify-between items-start mb-2">
                                <h4 className="font-medium text-[#e2c376]">{character.name}</h4>
                                <span className="text-xs text-[#e7e7e7]/50">Episode {character.introducedInEpisode}</span>
                              </div>
                              <p className="text-sm text-[#e7e7e7]/80">{character.description}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* New Locations */}
                    {storyBible.newLocations && storyBible.newLocations.length > 0 && (
                      <div>
                        <h3 className="text-xl font-semibold text-[#e2c376] mb-4">New Locations Discovered</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          {storyBible.newLocations.map((location: any, index: number) => (
                            <div key={index} className="bg-[#2a2a2a] border border-[#36393f] rounded-lg p-4">
                              <div className="flex justify-between items-start mb-2">
                                <h4 className="font-medium text-[#e2c376]">{location.name}</h4>
                                <span className="text-xs text-[#e7e7e7]/50">Episode {location.introducedInEpisode}</span>
                              </div>
                              <p className="text-sm text-[#e7e7e7]/80">{location.description}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Story Evolution */}
                    {storyBible.storyEvolution && storyBible.storyEvolution.length > 0 && (
                      <div>
                        <h3 className="text-xl font-semibold text-[#e2c376] mb-4">Story Evolution</h3>
                        <div className="space-y-4">
                          {storyBible.storyEvolution.map((evolution: any, index: number) => (
                            <div key={index} className="bg-[#2a2a2a] border border-[#36393f] rounded-lg p-4">
                              <div className="flex justify-between items-start mb-2">
                                <span className="text-sm font-medium text-[#e2c376]">Episode {evolution.episode}</span>
                                <span className={`text-xs px-2 py-1 rounded-full ${
                                  evolution.type === 'callback' 
                                    ? 'bg-blue-500/20 text-blue-300' 
                                    : 'bg-purple-500/20 text-purple-300'
                                }`}>
                                  {evolution.type === 'callback' ? 'Callback' : 'Foreshadowing'}
                                </span>
                              </div>
                              <div className="space-y-1">
                                {evolution.elements.map((element: string, elemIndex: number) => (
                                  <p key={elemIndex} className="text-sm text-[#e7e7e7]/80">• {element}</p>
                                ))}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <div className="text-[#e7e7e7]/50 mb-4">No episodes generated yet</div>
                    <p className="text-sm text-[#e7e7e7]/70">
                      Start generating episodes to see how your choices shape the story!
                    </p>
                  </div>
                )}
              </div>
            )}
          </motion.div>
        </AnimatePresence>

        {/* Call-to-Action Button */}
        <div className="flex justify-center gap-4 mb-12">
          <motion.button
            onClick={() => router.push('/projects')}
            className="bg-[#2a2a2a] border border-[#e2c376] text-[#e2c376] px-6 py-3 rounded-xl font-medium text-lg hover:bg-[#2a2a2a]/70 transition-all"
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            View All Projects
          </motion.button>
          <motion.button
            onClick={() => router.push('/workspace')}
            className="bg-gradient-to-r from-[#e2c376] to-[#c4a75f] text-black px-8 py-4 rounded-xl font-bold text-lg hover:opacity-90 transition-opacity"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.98 }}
          >
            Continue
          </motion.button>
        </div>
      </div>
    </motion.div>
  )
} 